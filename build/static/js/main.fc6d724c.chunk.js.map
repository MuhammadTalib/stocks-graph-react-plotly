{"version":3,"sources":["Components/Graph.jsx","services/api.js","Utils/utils.js","Components/Header.jsx","templates/templates.js","App.js","reportWebVitals.js","index.js"],"names":["Plot","createPlotlyComponent","Plotly","Graph","style","data","layout","templates","config","responsive","axios","defaults","baseURL","getAllStocks","endpoint","a","get","then","catch","error","console","log","times","name","ms","Header","handleGrapthType","graphType","templateChange","templatesOptions","selectedStock","handleStockChange","selectedTime","hanldeSelectedTime","useState","stocks","setStocks","useEffect","res","list","Grid","container","spacing","direction","alignItems","textAlign","padding","item","xs","Autocomplete","value","disableClearable","textInputProps","clearButtonMode","onChange","event","newValue","fullWidth","inputValue","options","renderInput","params","TextField","variant","label","ButtonGroup","Button","onClick","color","map","t","i","m","template1","graph","x","y","low","xaxis","yaxis","marker","templateType","subGraphs","mergedGraphs","high","type","open","close","template2","template3","axis","id","template","dummy","decreasing","fillcolor","line","increasing","App","loader","setLoader","setGraphType","setSubGraphs","selectedTemplates","setSelectedTemplates","setTemplates","dragmode","margin","l","r","b","showlegend","domain","range","Date","rangeslider","visible","title","autorange","position","side","autosize","height","setLayout","setSelectStock","setSelectTime","setGraphData","getDataRequest","stock","time","toLowerCase","forEach","push","date","now","length","err","className","tempData","indexOf","filter","f","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc6d724c.chunk.js","sourcesContent":["import * as Plotly from \"plotly.js\";\r\nimport React from \"react\";\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nimport \"../App.css\";\r\n\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nexport const Graph = ({ style, data, layout, templates }) => {\r\n  const config = {responsive: true}\r\n  return (\r\n    <Plot style={style} data={[data, ...(templates || [])]} layout={layout} config={config}\r\n    />\r\n  );\r\n};\r\n","import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"http://3.210.142.92:5000/\";\r\n\r\nexport const getAllStocks = async (endpoint) => {\r\n    return await axios\r\n      .get(`${endpoint}`)\r\n      .then(( data ) => {\r\n        return data;\r\n      })\r\n      .catch((error) => {\r\n       console.log(error)\r\n      });\r\n  };","export const times = [\r\n  { name: \"1h\", ms: 3600000 },\r\n  { name: \"1d\", ms: 86400000 },\r\n  { name: \"1wk\", ms: 604800000 },\r\n  { name: \"1mo\", ms: 2629746000 },\r\n];\r\n","import BarChartIcon from \"@mui/icons-material/BarChart\";\r\nimport WaterfallChartIcon from \"@mui/icons-material/WaterfallChart\";\r\nimport Button from \"@mui/material/Button\";\r\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport { getAllStocks } from \"../services/api\";\r\nimport { Grid, TextField } from \"@mui/material\";\r\nimport { times } from \"../Utils/utils\";\r\nconst Header = ({\r\n  handleGrapthType,\r\n  graphType,\r\n  templateChange,\r\n  templatesOptions,\r\n  data,\r\n  selectedStock,\r\n  handleStockChange,\r\n  selectedTime,\r\n  hanldeSelectedTime,\r\n}) => {\r\n  let [stocks, setStocks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getAllStocks(\"stocks/available\").then((res) => {\r\n      console.log(\"res\", res);\r\n      setStocks(res?.data?.list || []);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={2}\r\n      direction=\"row\"\r\n      alignItems=\"center\"\r\n      textAlign=\"center\"\r\n      style={{ padding: \"10px\" }}\r\n    >\r\n      <Grid item xs={2}>\r\n        <Autocomplete\r\n          value={selectedStock}\r\n          disableClearable\r\n          textInputProps={{ clearButtonMode: \"hidden\" }}\r\n          onChange={(event, newValue) => {\r\n            handleStockChange(newValue);\r\n          }}\r\n          fullWidth\r\n          inputValue={selectedStock}\r\n          options={stocks}\r\n          renderInput={(params) => (\r\n            <TextField {...params} variant=\"standard\" label=\"Stock\" />\r\n          )}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={1}>\r\n        <ButtonGroup variant=\"text\" aria-label=\"text button group\">\r\n          <Button onClick={() => handleGrapthType(\"candlestick\")}>\r\n            <WaterfallChartIcon\r\n              color={graphType === \"candlestick\" ? \"primary\" : \"action\"}\r\n            />\r\n          </Button>\r\n          <Button onClick={() => handleGrapthType(\"ohlc\")}>\r\n            <BarChartIcon color={graphType !== \"ohlc\" ? \"primary\" : \"action\"} />\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <ButtonGroup variant=\"text\" aria-label=\"text button group\">\r\n          {times.map((t, i) => (\r\n            <Button\r\n              key={i}\r\n              onClick={() => hanldeSelectedTime(t)}\r\n              color={selectedTime.name !== t.name ? \"primary\" : \"error\"}\r\n            >\r\n              {t.name}\r\n            </Button>\r\n          ))}\r\n        </ButtonGroup>\r\n      </Grid>\r\n\r\n      <Grid item xs={5}>\r\n        {\" \"}\r\n        <ButtonGroup variant=\"text\" aria-label=\"text button group\">\r\n          {templatesOptions(data).map((m, i) => (\r\n            <Button key={i} onClick={() => templateChange(m)}>\r\n              {m.name}\r\n            </Button>\r\n          ))}\r\n        </ButtonGroup>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","export const template1 = (data) => {\r\n  return {\r\n    graph: [\r\n      {\r\n        x: data.x,\r\n        y: data.low,\r\n        xaxis: \"x\",\r\n        yaxis: \"y\",\r\n        marker: {\r\n          color: \"blue\",\r\n        },\r\n        templateType: 1,\r\n      },\r\n    ],\r\n    subGraphs: [\r\n      {\r\n        x: data.x,\r\n        y: data.low,\r\n        xaxis: \"x\",\r\n        yaxis: \"y\",\r\n        marker: {\r\n          color: \"blue\",\r\n        },\r\n        templateType: 1,\r\n        mergedGraphs: [\r\n          {\r\n            x: data.x,\r\n            y: data.a,\r\n            xaxis: \"x\",\r\n            yaxis: \"y\",\r\n            marker: {\r\n              color: \"#90c7fc\",\r\n            },\r\n            templateType: 1,\r\n          },\r\n          {\r\n            x: data.x,\r\n            y: data.high,\r\n            xaxis: \"x\",\r\n            yaxis: \"y\",\r\n            type: \"scatter\",\r\n            marker: {\r\n              color: \"red\",\r\n            },\r\n            templateType: 1,\r\n          },\r\n          {\r\n            x: data.x,\r\n            y: data.open,\r\n            type: \"bar\",\r\n            marker: {\r\n              color: data.open.map((m, i) =>\r\n                m < data.close[i] ? \"green\" : \"red\"\r\n              ),\r\n            },\r\n            xaxis: \"x\",\r\n            yaxis: \"y\",\r\n            templateType: 1,\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  };\r\n};\r\n\r\nexport const template2 = (data) => {\r\n  return {\r\n    graph: [\r\n      {\r\n        x: data.x,\r\n        y: data.low.map((m, i) => (m + data.high[i]) / 2),\r\n        xaxis: \"x\",\r\n        yaxis: \"y\",\r\n        marker: {\r\n          color: \"#90c7fc\",\r\n        },\r\n        templateType: 2,\r\n      },\r\n      {\r\n        x: data.x,\r\n        y: data.low.map((m, i) => (m + data.high[i]) / 2 + 0.8999),\r\n        xaxis: \"x\",\r\n        yaxis: \"y\",\r\n        marker: {\r\n          color: \"#90c7fc\",\r\n        },\r\n        templateType: 2,\r\n      },\r\n    ],\r\n    subGraphs: [],\r\n  };\r\n};\r\n\r\nexport const template3 = (data, axis) => {\r\n  return {\r\n    graph: [\r\n      {\r\n        x: data.x,\r\n        y: data.low.map((m) => m + 10),\r\n        xaxis: \"x\",\r\n        yaxis: \"y\",\r\n        marker: {\r\n          color: \"blue\",\r\n        },\r\n        templateType: 3,\r\n      },\r\n      {\r\n        x: data.x,\r\n        y: data.low.map((m) => m - 10),\r\n        xaxis: \"x\",\r\n        yaxis: \"y\",\r\n        marker: {\r\n          color: \"blue\",\r\n        },\r\n        templateType: 3,\r\n      },\r\n    ],\r\n    subGraphs: [\r\n      {\r\n        x: data.x,\r\n        y: data.open.map((m, i) => (m < data.close[i] ? m : m * -1)),\r\n        type: \"bar\",\r\n        marker: {\r\n          color: \"rgba(255,0,0,0.7)\", // data.open.map((m, i) => (m < data.close[i] ? \"green\" : \"red\")),\r\n        },\r\n        xaxis: \"x\",\r\n        yaxis: \"y\",\r\n        templateType: 3,\r\n        mergedGraphs: [\r\n          {\r\n            x: data.x,\r\n            y: data.open.map((m, i) => (m < data.close[i] ? m : m * -1)),\r\n            xaxis: \"x\",\r\n            yaxis: \"y\",\r\n            type: \"scatter\",\r\n            marker: {\r\n              color: \"red\",\r\n            },\r\n            templateType: 3,\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        x: data.x,\r\n        y: data.open.map((m, i) => (m < data.close[i] ? m : m * -1)),\r\n        type: \"bar\",\r\n        marker: {\r\n          color: \"rgba(0,0,255,0.7)\", // data.open.map((m, i) => (m < data.close[i] ? \"green\" : \"red\")),\r\n        },\r\n        xaxis: \"x\",\r\n        yaxis: \"y\",\r\n        templateType: 3,\r\n        mergedGraphs: [\r\n          {\r\n            x: data.x,\r\n            y: data.low,\r\n            xaxis: \"x\",\r\n            yaxis: \"y\",\r\n            marker: {\r\n              color: \"blue\",\r\n            },\r\n            templateType: 3,\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  };\r\n};\r\nexport const templatesOptions = (data) => [\r\n  { name: \"T1\", id: 1, template: { ...template1(data) } },\r\n  { name: \"T2\", id: 2, template: { ...template2(data) } },\r\n  { name: \"T3\", id: 3, template: { ...template3(data) } },\r\n  // { name: \"T4\", id: 4, template: template1 },\r\n  // { name: \"T5\", id: 5, template: template1 },\r\n  // { name: \"T6\", id: 6, template: template1 },\r\n];\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { Graph } from \"./Components/Graph\";\r\nimport Header from \"./Components/Header\";\r\nimport { getAllStocks } from \"./services/api\";\r\nimport { templatesOptions } from \"./templates/templates\";\r\n\r\nconst dummy = {\r\n  x: [],\r\n  close: [],\r\n  decreasing: { fillcolor: \"black\", line: { color: \"black\" } },\r\n  high: [],\r\n  increasing: { fillcolor: \"white\", line: { color: \"black\" } },\r\n  line: { color: \"rgba(31,119,180,1)\" },\r\n  low: [],\r\n  open: [],\r\n  type: \"candlestick\",\r\n  xaxis: \"x\",\r\n  yaxis: \"y\",\r\n};\r\nconst rightMargin = 10;\r\nconst candleDefault = 214;\r\n\r\nfunction App() {\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  const [graphType, setGraphType] = useState(\"candlestick\");\r\n  const [subGraphs, setSubGraphs] = useState([]);\r\n  const [selectedTemplates, setSelectedTemplates] = useState([]);\r\n  const [templates, setTemplates] = useState([]);\r\n  const style = { width: \"100%\", height: \"100%\" };\r\n\r\n  const [layout, setLayout] = useState({\r\n    dragmode: \"zoom\",\r\n    margin: { t: 0, l: 30, r: 0, b: 25 },\r\n    showlegend: false,\r\n    xaxis: {\r\n      domain: [0, 1],\r\n      range: [\r\n        new Date(\"Tue, 16 Jan 2021 18:30:00 GMT\"),\r\n        new Date(\"Wed, 08 Feb 2021 14:32:32 GMT\"),\r\n      ],\r\n      rangeslider: {\r\n        visible: false,\r\n      },\r\n      title: \"Date\",\r\n      type: \"date\",\r\n    },\r\n    yaxis: {\r\n      domain: [0, 1],\r\n      autorange: true,\r\n      position: 1,\r\n      side: \"bottom\",\r\n    },\r\n\r\n    // shapes: [\r\n    //   {\r\n    //     type: \"rect\",\r\n    //     xref: \"x\",\r\n    //     yref: \"y\",\r\n    //     x0: \"2021-10-25\",\r\n    //     y0: 179,\r\n    //     x1: \"2021-10-26\",\r\n    //     y1: 180.5,\r\n    //     fillcolor: \"yellow\",\r\n    //     opacity: 0.6,\r\n    //     line: {\r\n    //       width: 1,\r\n    //       color: \"green\",\r\n    //       opacity: 1,\r\n    //     },\r\n    //   },\r\n    // ],\r\n    autosize: true,\r\n    height: 550,\r\n  });\r\n\r\n  const handleGrapthType = (type) => {\r\n    setGraphType(type);\r\n  };\r\n  const addTemplate = (id, template) => {\r\n    console.log(\"Arr\", template.subGraphs);\r\n    if (selectedTemplates.indexOf(id) !== -1) {\r\n      setTemplates([...templates.filter((f) => f.templateType !== id)]);\r\n      setSubGraphs([...subGraphs.filter((f) => f.templateType !== id)]);\r\n\r\n      setSelectedTemplates([...selectedTemplates.filter((f) => f !== id)]);\r\n    } else {\r\n      setSelectedTemplates([...selectedTemplates, id]);\r\n\r\n      setTemplates([...templates, ...template.graph]);\r\n      setSubGraphs([...subGraphs, ...template.subGraphs]);\r\n    }\r\n  };\r\n  const templateChange = (tempData) => {\r\n    addTemplate(tempData.id, tempData.template);\r\n  };\r\n\r\n  const [selectedStock, setSelectStock] = useState(\"MMM\");\r\n  const [selectedTime, setSelectTime] = useState({ name: \"1d\", ms: 86400000 });\r\n\r\n  const [data, setGraphData] = useState({ ...dummy });\r\n\r\n  const getDataRequest = (stock, time) => {\r\n    setLoader(true);\r\n    getAllStocks(`stocks?stock=${stock?.toLowerCase()}&interval=${time.name}`)\r\n      .then((res) => {\r\n        setLoader(false);\r\n        let high = [],\r\n          low = [],\r\n          open = [],\r\n          close = [],\r\n          x = [];\r\n        res?.data?.data?.forEach((m) => {\r\n          high.push(m.high);\r\n          low.push(m.low);\r\n          open.push(m.open);\r\n          close.push(m.close);\r\n          x.push(new Date(m.date));\r\n        });\r\n        for (let i = 0; i < rightMargin; i++) {\r\n          high.push(null);\r\n          low.push(null);\r\n          open.push(null);\r\n          close.push(null);\r\n          x.push(new Date(Date.now(x[x.length - 1]) + (i + 1) * time.ms));\r\n        }\r\n        setGraphData({ ...dummy, high, low, open, close, x });\r\n        setLayout({\r\n          ...layout,\r\n          xaxis: {\r\n            ...layout.xaxis,\r\n            range: [\r\n              new Date(Date.now(x[x.length - 1]) - candleDefault * time.ms),\r\n              new Date(x[x.length - 1]),\r\n            ],\r\n            rangeslider: {\r\n              visible: false,\r\n            },\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        setLoader(false);\r\n      });\r\n  };\r\n\r\n  useState(() => {\r\n    getDataRequest(selectedStock, selectedTime);\r\n  }, []);\r\n\r\n  const handleStockChange = (stock) => {\r\n    setSelectStock(stock);\r\n    getDataRequest(stock, selectedTime);\r\n  };\r\n\r\n  const hanldeSelectedTime = (time) => {\r\n    setSelectTime(time);\r\n    getDataRequest(selectedStock, time);\r\n  };\r\n  return (\r\n    <>\r\n      {loader ? <div className=\"loader\"></div> : <></>}\r\n      <div>\r\n        <Header\r\n          graphType={graphType}\r\n          handleGrapthType={handleGrapthType}\r\n          templateChange={templateChange}\r\n          templatesOptions={templatesOptions}\r\n          data={data}\r\n          selectedStock={selectedStock}\r\n          selectedTime={selectedTime}\r\n          hanldeSelectedTime={hanldeSelectedTime}\r\n          handleStockChange={handleStockChange}\r\n        />\r\n\r\n        <div id=\"fullscreen\">\r\n          <Graph\r\n            style={style}\r\n            data={{ ...data, type: graphType }}\r\n            layout={layout}\r\n            templates={templates}\r\n          />\r\n          {subGraphs.map((m) => (\r\n            <Graph\r\n              key={m}\r\n              style={{ width: \"100%\" }}\r\n              data={{ ...m }}\r\n              layout={{ ...layout, autosize: true, height: 150 }}\r\n              templates={m.mergedGraphs}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}